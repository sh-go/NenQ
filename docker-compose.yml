version: '3.9'

services:
  web-back:
    container_name: python-backend
    stdin_open: true
    tty: true
    env_file:
      - ./backend/web-back/.env
    build:
      context: ./backend/web-back
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
        - USERNAME=user
        - GROUPNAME=user
    volumes:
      - ./backend/web-back:/code
      - static_volume:/code/staticfiles
    command: gunicorn --bind :8000 config.wsgi:application # 本番環境での起動コマンド
    networks:
      - backend_network
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - db

  backend-server:
    container_name: nginx-back
    build:
      context: ./backend/nginx
      dockerfile: Dockerfile.dev
    volumes:
      - static_volume:/code/staticfiles
    ports:
      - '8080:80'
    depends_on:
      - web-back
    networks:
      - backend_network

  # db:
  #   build: ./mysql
  #   container_name: db-container
  #   command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   ports:
  #     - '3306:3306'
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=root
  #     - MYSQL_DATABASE=paidholidaysList
  #     - MYSQL_USER=user
  #     - MYSQL_PASSWORD=password
  #     - TZ='Asia/Tokyo'
  #   volumes:
  #     - ./mysql_volume:/var/lib/mysql
  #     - ./sql:/docker-entrypoint-initdb.d
  #   networks:
  #     - backend_network
  db:
    image: postgres:16
    container_name: db-container
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=paidholidaysList
    volumes:
      - ./postgresql_volume:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - backend_network

  web-front:
    container_name: typescript-frontend
    stdin_open: true
    tty: true
    image: node:20.4.0
    volumes:
      - ./frontend/web-front:/home/app/frontend
    ports:
      - 3000:3000
    working_dir: /home/app/frontend
    networks:
      - frontend_network
      - backend_network

  frontend-server:
    container_name: nginx-frontend
    build:
      context: ./frontend/nginx
      dockerfile: Dockerfile.dev
    ports:
      - 80:80
    depends_on:
      - web-front
    networks:
      - frontend_network

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge

volumes:
  static_volume:
